diff --git a/c/.gitignore b/c/.gitignore
index ecbf95f1a1..59de4bfc1e 100644
--- a/c/.gitignore
+++ b/c/.gitignore
@@ -7,3 +7,4 @@
 
 # Build directory for Makefile build system
 bin/
+stats/
diff --git a/c/Makefile b/c/Makefile
index 136e80afb0..f2c2bd88ac 100644
--- a/c/Makefile
+++ b/c/Makefile
@@ -6,12 +6,14 @@
 #
 # SPDX-License-Identifier: Apache-2.0
 
+# VAST-PATCH
+
 LEVEL := ./
 
 # Don't try to build any sources on this level
 SKIP_LEVEL := 1
 
 # This directory does not contain tasks
-IGNORE_DIRS := ./properties/ ./Juliet_Test/
+IGNORE_DIRS := ./properties/ ./Juliet_Test/ ./stats/
 
 include $(LEVEL)/Makefile.config
diff --git a/c/Makefile.config b/c/Makefile.config
index d17f076b5a..39e89757b9 100644
--- a/c/Makefile.config
+++ b/c/Makefile.config
@@ -61,6 +61,22 @@ BUILD_DIR := bin
 ################################################################################
 EMIT_LLVM ?= 0
 
+################################################################################
+# NO - Emit native object files
+# other - Emit selected dialect
+################################################################################
+EMIT_MLIR ?= NO
+
+################################################################################
+# vast-front - default
+################################################################################
+MLIR_COMPILER ?= vast-front
+
+################################################################################
+# vast-emit-mlir - default
+################################################################################
+MLIR_OPTION ?= -vast-emit-mlir
+
 ################################################################################
 # Warning flags to be passed to clang and gcc (i.e. flags are supported by both
 # compilers).
@@ -69,7 +85,6 @@ EMIT_LLVM ?= 0
 ################################################################################
 DEFAULT_COMMON_WARNINGS := \
 	-Wall \
-	-Werror \
 	-Wno-unused-label \
 	-Wno-unused-function \
 	-Wno-unused-variable \
@@ -98,6 +113,11 @@ DEFAULT_CLANG_WARNINGS := \
 	-Wno-constant-conversion \
 	-Wno-builtin-requires-header # (cf. #225) \
 
+################################################################################
+# Warning flags that will only be passed to vast
+################################################################################
+DEFAULT_VAST_WARNINGS :=
+
 
 ################################################################################
 # Set default behaviour for suppressing compiler warnings
diff --git a/c/Makefile.rules b/c/Makefile.rules
index 1a870a6ba3..80d7acdfc8 100644
--- a/c/Makefile.rules
+++ b/c/Makefile.rules
@@ -106,9 +106,24 @@ clean::
 
 # Detect Compiler
 # FIXME: Not sure $(GREP) accepts these flags on OSX
-CC_COMPILER_OUTPUT :=$(shell $(CC) -E $(ROOT_DIR)/Makefile-detect-compiler.c -o -)
-CC_IS_GCC:=$(shell echo '$(CC_COMPILER_OUTPUT)' | $(GREP) -c SVCOMP_C_COMPILER_IS_GCC)
-CC_IS_CLANG:=$(shell echo '$(CC_COMPILER_OUTPUT)' | $(GREP) -c SVCOMP_C_COMPILER_IS_CLANG)
+CC_IS_MLIR := 0
+CC_IS_GCC := 0
+CC_IS_CLANG := 0
+ifeq ($(shell basename $(CC)), $(MLIR_COMPILER))
+	CC_IS_MLIR := 1
+else
+	CC_COMPILER_OUTPUT :=$(shell $(CC) -E $(ROOT_DIR)/Makefile-detect-compiler.c -o -)
+	CC_IS_GCC:=$(shell echo '$(CC_COMPILER_OUTPUT)' | $(GREP) -c SVCOMP_C_COMPILER_IS_GCC)
+	CC_IS_CLANG:=$(shell echo '$(CC_COMPILER_OUTPUT)' | $(GREP) -c SVCOMP_C_COMPILER_IS_CLANG)
+endif
+
+ifneq ($(EMIT_MLIR),NO)
+	ifneq ($(CC_IS_MLIR),1)
+		$(error  To use EMIT_MLIR you must use compatible compiler (set MLIR_COMPILER))
+	endif
+	CC.Flags += $(MLIR_OPTION)=$(EMIT_MLIR)
+endif
+
 
 ################################################################################
 # Begin ifndef SKIP_LEVEL
@@ -123,18 +138,23 @@ ifeq ($(SUPPRESS_WARNINGS),0)
     CC.Warnings += $(DEFAULT_GCC_WARNINGS) $(GCC_WARNINGS)
   else ifeq ($(CC_IS_CLANG),1)
     CC.Warnings += $(DEFAULT_CLANG_WARNINGS) $(CLANG_WARNINGS)
+  else ifeq ($(CC_IS_MLIR),1)
+    CC.Warnings += $(DEFAULT_CLANG_WARNINGS) $(CLANG_WARNINGS) $(DEFAULT_VAST_WARNINGS)
   else
     $(error Compiler "$(CC)" was not identified as gcc or clang)
   endif
 else
   # Suppress all warnings
-  CC.Warnings := -w
+  CC.Warnings := -w -Wno-int-conversion
 endif
 
 CC.Flags += -std=$(CC.Standard) \
             -m$(CC.Arch) \
             $(CC.Warnings)
 
+ifeq ($(DISABLE_UNSUPPORTED),true)
+    CC.Flags += -vast-disable-unsupported
+endif
 
 # Handle emission of LLVM Bitcode rather than native code
 ifneq ($(EMIT_LLVM),0)
@@ -145,7 +165,9 @@ ifneq ($(EMIT_LLVM),0)
   CC.Flags += -emit-llvm
 else
   ifneq ($(SYNTAX_ONLY),0)
-    CC.Flags += -fsyntax-only
+    ifeq ($(EMIT_MLIR),NO)
+        CC.Flags += -fsyntax-only
+    endif
   endif
 endif
 
@@ -201,23 +223,31 @@ build_at_level: $(C_OBJS) $(I_OBJS)
 # -fsyntax-only is used as Clang doesn't seem to emit a file
 # to $@
 $(LOCAL_BUILD_DIR)/%.oc: %.c
-	@if [ $(REPORT_CC_FILE) -eq 1 ]; then \
-		echo "$(CC) building $(LOCAL_BUILD_DIR_SUFFIX)/$<" ; \
-	elif [ $(REPORT_CC_FILE) -eq 2 ]; then \
+	$(Verb) if [ $(REPORT_CC_FILE) -eq 2 ]; then \
 		echo -n "."; \
 	fi
 	$(Verb) $(MKDIR) -p $(LOCAL_BUILD_DIR)
-	$(Verb) $(CC) $(CC.Flags) -c $< -o $@ -MP -MMD -MF $(LOCAL_BUILD_DIR)/$*.dc
+	$(Verb) if [ $(REPORT_CC_FILE) -eq 1 ]; then \
+		$(CC) $(CC.Flags) -c $< -o $@ -MP -MMD -MF $(LOCAL_BUILD_DIR)/$*.dc && \
+		(echo "$(CC) building $(LOCAL_BUILD_DIR_SUFFIX)/$<" && echo "OK") || \
+		echo "$(CC) building $(LOCAL_BUILD_DIR_SUFFIX)/$<"; \
+	else \
+		$(CC) $(CC.Flags) -c $< -o $@ -MP -MMD -MF $(LOCAL_BUILD_DIR)/$*.dc; \
+	fi
 	$(Verb) $(TOUCH) $@
 
 $(LOCAL_BUILD_DIR)/%.oi: %.i
-	@if [ $(REPORT_CC_FILE) -eq 1 ]; then \
-		echo "$(CC) building $(LOCAL_BUILD_DIR_SUFFIX)/$<" ; \
-	elif [ $(REPORT_CC_FILE) -eq 2 ]; then \
+	$(Verb) if [ $(REPORT_CC_FILE) -eq 2 ]; then \
 		echo -n "."; \
 	fi
 	$(Verb) $(MKDIR) -p $(LOCAL_BUILD_DIR)
-	$(Verb) $(CC) $(CC.Flags) -c $< -o $@ -MP -MMD -MF $(LOCAL_BUILD_DIR)/$*.di
+	$(Verb) if [ $(REPORT_CC_FILE) -eq 1 ]; then \
+		$(CC) $(CC.Flags) -c $< -o $@ -MP -MMD -MF $(LOCAL_BUILD_DIR)/$*.di && \
+		(echo "$(CC) building $(LOCAL_BUILD_DIR_SUFFIX)/$<" && echo "OK") || \
+		echo "$(CC) building $(LOCAL_BUILD_DIR_SUFFIX)/$<"; \
+	else \
+		$(CC) $(CC.Flags) -c $< -o $@ -MP -MMD -MF $(LOCAL_BUILD_DIR)/$*.di; \
+	fi
 	$(Verb) $(TOUCH) $@
 
 # All the objects have these additional dependencies
@@ -247,14 +277,17 @@ debug_vars:
 	@echo "C_SRCS := $(C_SRCS)"
 	@echo "I_SRCS := $(I_SRCS)"
 	@echo "C_I_COMMON_SRCS := $(C_I_COMMON_SRCS)"
+	@echo "CC:= $(CC)"
 	@echo "CC.Flags := $(CC.Flags)"
 	@echo "CC.Warnings := $(CC.Warnings)"
 	@echo "CC_IS_CLANG := $(CC_IS_CLANG)"
 	@echo "CC_IS_GCC := $(CC_IS_GCC)"
+	@echo "CC_IS_MLIR:= $(CC_IS_MLIR)"
 	@echo "CURRENT_DIR := $(CURRENT_DIR)"
 	@echo "DEPTH := $(DEPTH)"
 	@echo "DIRS := $(DIRS)"
 	@echo "EMIT_LLVM := $(EMIT_LLVM)"
+	@echo "EMIT_HL_MLIR := $(EMIT_HL_MLIR)"
 	@echo "IGNORE_SRCS := $(IGNORE_SRCS)"
 	@echo "LEVEL := $(LEVEL)"
 	@echo "LOCAL_BUILD_DIR := $(LOCAL_BUILD_DIR)"
